x-common-env: &common-env
  TZ: ${TZ}
  STATION_ID: ${STATION_ID?Variable not set}
  STREAM_URL: ${STREAM_URL?Variable not set}
  ARCHIVE_DIR: ${ARCHIVE_DIR?Variable not set}
  UNMATCHED_DIR: ${UNMATCHED_DIR?Variable not set}
  SEGMENT_DURATION_SECONDS: ${SEGMENT_DURATION_SECONDS?Variable not set}

x-containers-env: &containers-env
  # RECORDER_HOST: ${RECORDER_CONTAINER_NAME:-wbor-archiver-recorder}
  # WATCHDOG_HOST: ${WATCHDOG_CONTAINER_NAME:-wbor-archiver-watchdog}
  RMQ_HOST: ${RMQ_CONTAINER_NAME:-wbor-archiver-mq}
  BACKEND_HOST: ${BACKEND_CONTAINER_NAME:-wbor-archiver-backend}
  BACKEND_PORT: ${BACKEND_PORT:-8000}
  PGADMIN_HOST: ${PGADMIN_CONTAINER_NAME:-pgadmin}
  FRONTEND_HOST: ${FRONTEND_CONTAINER_NAME:-wbor-archiver-frontend}

x-rabbitmq-env: &rabbitmq-env
  RABBITMQ_HOST: ${RABBITMQ_HOST?Variable not set}
  RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE?Variable not set}
  RABBITMQ_QUEUE: ${RABBITMQ_QUEUE?Variable not set}

x-db-env: &db-env
  POSTGRES_HOST: ${POSTGRES_HOST?Variable not set}
  POSTGRES_PORT: ${POSTGRES_PORT?Variable not set}
  POSTGRES_DB: ${POSTGRES_DB?Variable not set}
  POSTGRES_USER: ${POSTGRES_USER?Variable not set}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}

services:
  recording:
    build:
      context: ./recording
    container_name: ${RECORDER_CONTAINER_NAME:-wbor-archiver-recorder}
    restart: always # Ensure continuous recording
    volumes:
      - ${ARCHIVE_DIR?Variable not set}:/archive
    environment:
      <<: *common-env
    logging:
      driver: "json-file"
      options:
        max-size: "50m" # Max log file size before rotation (50MB)
        max-file: "3" # Keep last 3 rotated log files
    networks:
      - wbor-network

  watchdog:
    build:
      context: ./archive-watchdog
    container_name: ${WATCHDOG_CONTAINER_NAME:-wbor-archiver-watchdog}
    restart: always
    volumes:
      - ${ARCHIVE_DIR?Variable not set}:/archive
    environment:
      <<: [ *common-env, *rabbitmq-env ]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - wbor-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: ${RMQ_CONTAINER_NAME:-wbor-archiver-mq}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER?Variable not set}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - wbor-network

  backend:
    build:
      context: ./backend
      args:
        BACKEND_PORT: ${BACKEND_PORT:-8000}
    container_name: ${BACKEND_CONTAINER_NAME:-wbor-archiver-backend}
    restart: unless-stopped
    volumes:
      - ${ARCHIVE_DIR?Variable not set}:/archive:ro # API needs read-only permission
      - ./backend:/app
    environment:
      <<: [ *common-env, *rabbitmq-env, *db-env ]
      BACKEND_APP_PASS: ${BACKEND_APP_PASS?Variable not set}
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/api/ || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wbor-network

  database:
    image: postgres:17
    container_name: ${DATABASE_CONTAINER_NAME:-wbor-archiver-db}
    build:
      context: ./database
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent storage for the database data (allows data to outlive container restarts/builds)
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize the database with custom SQL init script
      - ./database/sample_data/images:/media
    environment:
      <<: *db-env
    networks:
      - wbor-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${PGADMIN_CONTAINER_NAME:-pgadmin}
    volumes:
      # Pre-configured servers.json file
      # (Don't forget to change the file if any changes are made to the database service)
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL?Variable not set}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD?Variable not set}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - wbor-network

  frontend:
    build:
      context: ./frontend
    container_name: ${FRONTEND_CONTAINER_NAME:-wbor-archiver-frontend}
    restart: unless-stopped
    ports:
      - "3000:80" # Direct local access for debugging
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wbor-network

  proxy:
    build:
      context: ./proxy
    container_name: ${PROXY_CONTAINER_NAME:-wbor-archiver-proxy}
    restart: unless-stopped
    ports:
      - "${CONTAINER_PORT}:80"
    depends_on:
      - backend
      - frontend
    environment:
      <<: *containers-env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80/ || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wbor-network

volumes:
  postgres_data:

networks:
  wbor-network:
    driver: bridge
