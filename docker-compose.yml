services:
  recording:
    build:
      context: ./recording
    container_name: wbor-archiver-recorder
    restart: always # Ensure continuous recording
    volumes:
      - ./archive:/archive # Mount the archive directory from the project folder
    environment:
      - STATION_ID
      - STREAM_URL
      - ARCHIVE_DIR
      - SEGMENT_DURATION_SECONDS
      - TZ
    logging:
      driver: "json-file"
      options:
        max-size: "50m" # Max log file size before rotation (50MB)
        max-file: "3" # Keep last 3 rotated log files
    networks:
      - wbor-network
  
  watchdog:
    build:
      context: ./archive-watchdog
    container_name: wbor-archiver-watchdog
    restart: always # Like the recorder, ensure continuous monitoring
    volumes:
      - ./archive:/archive
    environment:
      - ARCHIVE_DIR
      - UNMATCHED_DIR
      - SEGMENT_DURATION_SECONDS
      - TZ
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_EXCHANGE=wbor-archiver-exchange
      - RABBITMQ_QUEUE=recording-segments
    logging:
      driver: "json-file"
      options:
        max-size: "50m" # Max log file size before rotation (50MB)
        max-file: "3" # Keep last 3 rotated log files
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - wbor-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: wbor-archiver-mq
    restart: always
    ports:
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - wbor-network

  backend:
    build:
      context: ./backend
    container_name: wbor-archiver-backend
    restart: unless-stopped
    volumes:
      - ./archive:/archive:ro  # The API only needs read-only permission
    ports:
      - "8000:8000"  # For local development
    environment:
      - STATION_ID
      - ARCHIVE_DIR
      - UNMATCHED_DIR
      - SEGMENT_DURATION_SECONDS
      - TZ
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_EXCHANGE=wbor-archiver-exchange
      - RABBITMQ_QUEUE=recording-segments
      - DATABASE_URL
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wbor-network

  # If renaming this service (or db name), update DATABASE_URL in the .env file!
  database:
    image: postgres:15
    container_name: wbor-archiver-db
    build:
      context: ./database
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent storage for the database data (allows data to outlive container restarts/builds)
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize the database with our custom SQL init script
      - ./database/sample_data/images:/media
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: archive_db
    env_file:
      - .env
    networks:
      - wbor-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    env_file:
      - .env
    volumes:
      # Pre-configured servers.json file
      # Don't forget to change the file if any changes are made to the database service
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      database:
        condition: service_healthy
    networks:
      - wbor-network

  # web:
  #   build:
  #     context: ./web
  #   container_name: wbor-archiver-web
  #   restart: unless-stopped
  #   ports:
  #     - "3000:80" # Direct local access for debugging
  # depends_on:
  #   - backend
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s
  #   networks:
  #     - wbor-network

  proxy:
    build:
      context: ./proxy
    container_name: wbor-archiver-proxy
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
      # - web
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wbor-network

volumes:
  postgres_data: # Define a persistent volume for the PostgreSQL database (to outlive container restarts)

networks:
  wbor-network:
    driver: bridge
